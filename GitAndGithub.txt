Victor Marks

Basic Git Commands

Create a folder called learn_git. (Make sure you do this from a folder that isn't a git repository!)
mkdir learn_git

cd into the learn_git folder.
cd learn_git

Create a file called first.txt.
touch first.txt

Initialize an empty git repository.
git init

Add first.txt to the staging area.
git add first.txt

Commit with the message "adding first.txt".
git commit -m "adding first.txt"

Check out your commit with git log.
git status

Create another file called second.txt.
touch second.txt

Add second.txt to the staging area.
git add second.txt

Commit with the message "adding second.txt".
git commit -m "adding second.txt"

Remove the first.txt file.
rm first.txt

Add this change to the staging area.
git commit -m "removing first.txt"

Commit with the message "removing first.txt".
git status

Check out your commits using git log.
git log

Git Basics Exercises
Create a folder called learn_git_again.
mkdir learn_git_again

cd into the learn_git_again folder.
cd learn_git_again

Create a file called third.txt.
touch third.txt

Initialize an empty git repository.
git init

Add third.txt to the staging area.
git add third.txt

Commit with the message "adding third.txt".
git commit -m "adding third.txt"

Check out your commit with git log.
git log

Create another file called fourth.txt.
touch fourth.txt

Add fourth.txt to the staging area.
git add fourth.txt

Commit with the message "adding fourth.txt"
git commit -m "adding fourth.txt"

Remove the third.txt file
rm third.txt

Add this change to the staging area
git add third.txt

Commit with the message "removing third.txt"
git commit -m "removing third.txt"

Check out your commits using git log
git log

Change your global setting to core.pager=cat - you can read more about that here.
git config --global core.pager "cat"

Write the command to list all of the global configurations for git on your machine. You can type git config --global to find out how to do this
git config --global --list

Checkout and Reset
Create a folder called destruction.
mkdir destruction

cd into that folder.
cd destruction

Initialize an empty git repository.
git init

Create a file called done.txt.
touch done.txt

Remove that file from the working directory (remember you can not use git checkout).
git clean -df

Create a file called stage_me.txt.
touch stage_me.txt

Add stage_me.txt file to the staging area.
git add stage_me.txt

Move stage_me.txt file from the staging area to the working directory.
git reset --mixed COMMIT_SHA
Add stage_me.txt file to the staging area.
git add stage_me.txt

Remove stage_me.txt from the staging area and the working directory.
git reset --hard COMMIT_SHA

Create a new file called commit_me.txt.
touch commit_me.txt

Add commit_me.txt to the staging area.
git add commit_me.txt

Commit with the message "adding commit_me.txt".
git commit -m "adding commit_me.txt"

Create another file called second.txt.
touch second.txt

Add second.txt to the staging area.
git add second.txt

Commit with the message "adding second.txt".
git commit -m "adding second.txt"

Check out your previous commits using git log --oneline to see the unique identifier or SHA for each of your commits.
git log --oneline

Using git reset, undo the previous commit and move your changes back to the working directory.
git reset --mixed COMMIT_SHA

Add second.txt again.
git add second.txt

Commit with the message "Trying to commit again".
git commit -m "Trying to commit again."

Using git reset undo the previous commit and move your changes back to the staging area.
git reset --soft COMMIT_SHA

Commit with the message "Trying to commit again and again".
git commit -m "Trying to commit again and again"

Using git reset undo the previous commit so that any changes are not part of the working directory.
git reset --hard COMMIT_SHA

Branching
Create a folder called branch_time.
mkdir branch_time

cd into that folder.
cd branch_time

Initialize an empty git repository.
git init

Create a file called first.txt, then add and commit the file.
touch first.txt
git add first.txt
git commit -m "committing first.txt"

Create a new branch called amazing_feature.
git checkout -b amazing_feature

Create a file called best.txt.
touch best.txt

Add the file.
git add best.txt

Commit the file with the message -m "added best.txt".
git commit -m "added best.txt"

Switch back to the master branch.
git checkout master

Merge your changes from the feature branch into master.
git merge amazing_feature

Delete the feature branch.
git branch -D amazing_feature

Branching and Merging Exercises
Part I
What does git clean do?
It removes untracked or unmarked files from working directory.

What do the -d and -f flags for git clean do?
They force remove untracked directories.

What git command creates a branch?
git checkout -b

What is the difference between a fast-forward and recursive merge?
A recursive merge is needed when different commits happen on multiple branches.

What git command changes to another branch?
git checkout

How do you remove modified or deleted files from the working directory?
git checkout

What git command deletes a branch?
git branch -D

What does the git diff command do?
It shows the difference between two different commits (like edited history of commits).

How do you remove files from the staging area?
git reset HEAD file_name

How do merge conflicts happen?
It happens when the same file from different branches have different text inside.

Part II
Create your own merge conflict! Work on the same file on two separate branches and merge the two branches together. Fix the conflicts and finish your merge. In the real world you will never intentionally try to create merge conflicts, but it is important to understand how and why they are created. Most importantly, it's important not to be intimidated by merge conflicts, and to be able to fix them with confidence!
Must show computer which file you want to use by manually correcting the wrong file so that it matches correct file. After, add and commit resolved file and you're good to go.

GitHub Exercises
Part I - see GitHub

Part II - The culprit is Jeremy Bowers!!


